import asyncio
from typing import Optional
from app.utils import logger


async def should_execute_trade(
    proposed_signal: str,
    last_executed_signal: Optional[str] = None,
    min_rsi_change_threshold: Optional[float] = None,
    current_indicators: Optional[dict] = None,
    last_indicators: Optional[dict] = None,
    last_price: Optional[float] = None,
    last_updated: Optional[int] = None,
) -> bool:
    """
    Implements the "Think Twice" logic to decide if a trade should be executed.

    Args:
        proposed_signal (str): The signal generated by the analyzer
                               (buy, sell, or hold).
        last_executed_signal (Optional[str]): The last signal that was
                                              actually executed.
        min_rsi_change_threshold (Optional[float]): Minimum RSI change
                                                    required to execute a trade.
        current_indicators (Optional[dict]): The current technical indicators.
        last_indicators (Optional[dict]): The previous technical indicators.

    Returns:
        bool: True if the trade should be executed, False otherwise.
    """
    logger.info(f"Thinker: Proposed signal: {proposed_signal}")
    logger.info(f"Thinker: Last executed signal: {last_executed_signal}")
    logger.info(f"Thinker: Last price: {last_price}")

    if proposed_signal not in ["buy", "sell", "hold"]:
        logger.error(f"Thinker: Invalid proposed signal: {proposed_signal}. Must be 'buy', 'sell', or 'hold'.")
        return False

    logger.info("Thinker: Simulating reasoning delay...")
    await asyncio.sleep(1)

    if proposed_signal == last_executed_signal and proposed_signal != "hold":
        logger.info("Thinker: Skipping trade - duplicate consecutive signal.")
        return False

    if (
        min_rsi_change_threshold is not None
        and current_indicators is not None
        and last_indicators is not None
    ):
        current_rsi = current_indicators.get("RSI_14")
        last_rsi = last_indicators.get("RSI_14")
        if current_rsi is not None and last_rsi is not None:
            rsi_change = abs(current_rsi - last_rsi)
            if rsi_change < min_rsi_change_threshold:
                logger.info(
                    f"Thinker: Skipping trade - RSI change ({rsi_change:.2f}) "
                    f"below threshold ({min_rsi_change_threshold})."
                )
                return False

    logger.info("Thinker: Proceeding with trade execution.")
    return True